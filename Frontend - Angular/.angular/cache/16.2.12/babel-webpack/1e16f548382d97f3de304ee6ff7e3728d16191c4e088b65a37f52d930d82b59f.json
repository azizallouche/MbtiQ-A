{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  htmlEntities: false,\n  contentType: 'input',\n  onCopy: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar CopyClipboard = /** @class */function () {\n  function CopyClipboard(triggerEl, targetEl, options, instanceOptions) {\n    if (triggerEl === void 0) {\n      triggerEl = null;\n    }\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._triggerEl = triggerEl;\n    this._targetEl = targetEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._initialized = false;\n    this.init();\n    instances.addInstance('CopyClipboard', this, this._instanceId, instanceOptions.override);\n  }\n  CopyClipboard.prototype.init = function () {\n    var _this = this;\n    if (this._targetEl && this._triggerEl && !this._initialized) {\n      this._triggerElClickHandler = function () {\n        _this.copy();\n      };\n      // clicking on the trigger element should copy the value of the target element\n      if (this._triggerEl) {\n        this._triggerEl.addEventListener('click', this._triggerElClickHandler);\n      }\n      this._initialized = true;\n    }\n  };\n  CopyClipboard.prototype.destroy = function () {\n    if (this._triggerEl && this._targetEl && this._initialized) {\n      if (this._triggerEl) {\n        this._triggerEl.removeEventListener('click', this._triggerElClickHandler);\n      }\n      this._initialized = false;\n    }\n  };\n  CopyClipboard.prototype.removeInstance = function () {\n    instances.removeInstance('CopyClipboard', this._instanceId);\n  };\n  CopyClipboard.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  CopyClipboard.prototype.getTargetValue = function () {\n    if (this._options.contentType === 'input') {\n      return this._targetEl.value;\n    }\n    if (this._options.contentType === 'innerHTML') {\n      return this._targetEl.innerHTML;\n    }\n    if (this._options.contentType === 'textContent') {\n      return this._targetEl.textContent.replace(/\\s+/g, ' ').trim();\n    }\n  };\n  CopyClipboard.prototype.copy = function () {\n    var textToCopy = this.getTargetValue();\n    // Check if HTMLEntities option is enabled\n    if (this._options.htmlEntities) {\n      // Encode the text using HTML entities\n      textToCopy = this.decodeHTML(textToCopy);\n    }\n    // Create a temporary textarea element\n    var tempTextArea = document.createElement('textarea');\n    tempTextArea.value = textToCopy;\n    document.body.appendChild(tempTextArea);\n    // Select the text inside the textarea and copy it to the clipboard\n    tempTextArea.select();\n    document.execCommand('copy');\n    // Remove the temporary textarea\n    document.body.removeChild(tempTextArea);\n    // Callback function\n    this._options.onCopy(this);\n    return textToCopy;\n  };\n  // Function to encode text into HTML entities\n  CopyClipboard.prototype.decodeHTML = function (html) {\n    var textarea = document.createElement('textarea');\n    textarea.innerHTML = html;\n    return textarea.textContent;\n  };\n  CopyClipboard.prototype.updateOnCopyCallback = function (callback) {\n    this._options.onCopy = callback;\n  };\n  return CopyClipboard;\n}();\nexport function initCopyClipboards() {\n  document.querySelectorAll('[data-copy-to-clipboard-target]').forEach(function ($triggerEl) {\n    var targetId = $triggerEl.getAttribute('data-copy-to-clipboard-target');\n    var $targetEl = document.getElementById(targetId);\n    var contentType = $triggerEl.getAttribute('data-copy-to-clipboard-content-type');\n    var htmlEntities = $triggerEl.getAttribute('data-copy-to-clipboard-html-entities');\n    // check if the target element exists\n    if ($targetEl) {\n      if (!instances.instanceExists('CopyClipboard', $targetEl.getAttribute('id'))) {\n        new CopyClipboard($triggerEl, $targetEl, {\n          htmlEntities: htmlEntities && htmlEntities === 'true' ? true : Default.htmlEntities,\n          contentType: contentType ? contentType : Default.contentType\n        });\n      }\n    } else {\n      console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-copy-to-clipboard-target attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.CopyClipboard = CopyClipboard;\n  window.initClipboards = initCopyClipboards;\n}\nexport default CopyClipboard;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","instances","Default","htmlEntities","contentType","onCopy","DefaultInstanceOptions","id","override","CopyClipboard","triggerEl","targetEl","options","instanceOptions","_instanceId","_triggerEl","_targetEl","_options","_initialized","init","addInstance","_this","_triggerElClickHandler","copy","addEventListener","destroy","removeEventListener","removeInstance","destroyAndRemoveInstance","getTargetValue","value","innerHTML","textContent","replace","trim","textToCopy","decodeHTML","tempTextArea","document","createElement","body","appendChild","select","execCommand","removeChild","html","textarea","updateOnCopyCallback","callback","initCopyClipboards","querySelectorAll","forEach","$triggerEl","targetId","getAttribute","$targetEl","getElementById","instanceExists","console","error","concat","window","initClipboards"],"sources":["/Users/3alouch/Documents/GitHub/MbtiQ-A/Frontend - Angular/node_modules/flowbite/lib/esm/components/clipboard/index.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n    htmlEntities: false,\n    contentType: 'input',\n    onCopy: function () { },\n};\nvar DefaultInstanceOptions = {\n    id: null,\n    override: true,\n};\nvar CopyClipboard = /** @class */ (function () {\n    function CopyClipboard(triggerEl, targetEl, options, instanceOptions) {\n        if (triggerEl === void 0) { triggerEl = null; }\n        if (targetEl === void 0) { targetEl = null; }\n        if (options === void 0) { options = Default; }\n        if (instanceOptions === void 0) { instanceOptions = DefaultInstanceOptions; }\n        this._instanceId = instanceOptions.id\n            ? instanceOptions.id\n            : targetEl.id;\n        this._triggerEl = triggerEl;\n        this._targetEl = targetEl;\n        this._options = __assign(__assign({}, Default), options);\n        this._initialized = false;\n        this.init();\n        instances.addInstance('CopyClipboard', this, this._instanceId, instanceOptions.override);\n    }\n    CopyClipboard.prototype.init = function () {\n        var _this = this;\n        if (this._targetEl && this._triggerEl && !this._initialized) {\n            this._triggerElClickHandler = function () {\n                _this.copy();\n            };\n            // clicking on the trigger element should copy the value of the target element\n            if (this._triggerEl) {\n                this._triggerEl.addEventListener('click', this._triggerElClickHandler);\n            }\n            this._initialized = true;\n        }\n    };\n    CopyClipboard.prototype.destroy = function () {\n        if (this._triggerEl && this._targetEl && this._initialized) {\n            if (this._triggerEl) {\n                this._triggerEl.removeEventListener('click', this._triggerElClickHandler);\n            }\n            this._initialized = false;\n        }\n    };\n    CopyClipboard.prototype.removeInstance = function () {\n        instances.removeInstance('CopyClipboard', this._instanceId);\n    };\n    CopyClipboard.prototype.destroyAndRemoveInstance = function () {\n        this.destroy();\n        this.removeInstance();\n    };\n    CopyClipboard.prototype.getTargetValue = function () {\n        if (this._options.contentType === 'input') {\n            return this._targetEl.value;\n        }\n        if (this._options.contentType === 'innerHTML') {\n            return this._targetEl.innerHTML;\n        }\n        if (this._options.contentType === 'textContent') {\n            return this._targetEl.textContent.replace(/\\s+/g, ' ').trim();\n        }\n    };\n    CopyClipboard.prototype.copy = function () {\n        var textToCopy = this.getTargetValue();\n        // Check if HTMLEntities option is enabled\n        if (this._options.htmlEntities) {\n            // Encode the text using HTML entities\n            textToCopy = this.decodeHTML(textToCopy);\n        }\n        // Create a temporary textarea element\n        var tempTextArea = document.createElement('textarea');\n        tempTextArea.value = textToCopy;\n        document.body.appendChild(tempTextArea);\n        // Select the text inside the textarea and copy it to the clipboard\n        tempTextArea.select();\n        document.execCommand('copy');\n        // Remove the temporary textarea\n        document.body.removeChild(tempTextArea);\n        // Callback function\n        this._options.onCopy(this);\n        return textToCopy;\n    };\n    // Function to encode text into HTML entities\n    CopyClipboard.prototype.decodeHTML = function (html) {\n        var textarea = document.createElement('textarea');\n        textarea.innerHTML = html;\n        return textarea.textContent;\n    };\n    CopyClipboard.prototype.updateOnCopyCallback = function (callback) {\n        this._options.onCopy = callback;\n    };\n    return CopyClipboard;\n}());\nexport function initCopyClipboards() {\n    document\n        .querySelectorAll('[data-copy-to-clipboard-target]')\n        .forEach(function ($triggerEl) {\n        var targetId = $triggerEl.getAttribute('data-copy-to-clipboard-target');\n        var $targetEl = document.getElementById(targetId);\n        var contentType = $triggerEl.getAttribute('data-copy-to-clipboard-content-type');\n        var htmlEntities = $triggerEl.getAttribute('data-copy-to-clipboard-html-entities');\n        // check if the target element exists\n        if ($targetEl) {\n            if (!instances.instanceExists('CopyClipboard', $targetEl.getAttribute('id'))) {\n                new CopyClipboard($triggerEl, $targetEl, {\n                    htmlEntities: htmlEntities && htmlEntities === 'true'\n                        ? true\n                        : Default.htmlEntities,\n                    contentType: contentType\n                        ? contentType\n                        : Default.contentType,\n                });\n            }\n        }\n        else {\n            console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-copy-to-clipboard-target attribute.\"));\n        }\n    });\n}\nif (typeof window !== 'undefined') {\n    window.CopyClipboard = CopyClipboard;\n    window.initClipboards = initCopyClipboards;\n}\nexport default CopyClipboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}